




// script.js









// Select DOM elements
const chatBox = document.getElementById("chat-box");
const userInput = document.getElementById("user-input");
const sendBtn = document.getElementById("send-btn");





// Variable to track if the speaker is on or off
let isSpeakerOn = true;

// Function to toggle the speaker on/off
function toggleSpeaker() {
    isSpeakerOn = !isSpeakerOn; // Toggle the speaker state

    // Update button text based on the current state
    const speakerToggleButton = document.getElementById("speaker-toggle");
    speakerToggleButton.textContent = isSpeakerOn ? "ðŸ”Š Speaker On" : "ðŸ”‡ Speaker Off";
}



// Text-to-speech function
function speak(text) {
    if (!window.speechSynthesis) return; // Check if speech synthesis is supported and speaker is on

    // Check if text contains "#*" and skip speaking if it does
    if (text.includes("#*")) return;

    // Remove specific characters like *, #, and :
    const cleanedText = text.replace(/[*#:]/g, ""); // Removes *, #, and :

    const utterance = new SpeechSynthesisUtterance(cleanedText);
    utterance.lang = "en-IN"; // Set language to Indian English
    window.speechSynthesis.speak(utterance);
}





// Function to format responses in a structured manner
function formatResponse(text) {
    // Convert markdown-like sections to HTML tags
    text = text.replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>"); // Bold text
    text = text.replace(/\*(.*?)\*/g, "<em>$1</em>"); // Italic text

    // Add paragraph tags around line breaks
    text = text.split('\n').map(line => `<p>${line.trim()}</p>`).join("");

    // Convert numbered lists
    text = text.replace(/(\d+)\.\s/g, "<br><strong>$1.</strong> "); // For steps like "1. "

    // Convert unordered list items
    text = text.replace(/-\s/g, "<br>&bull; "); // For bullets "- item"

    return text;
}






// Function to display messages in the chat box
function displayMessage(message, sender) {
    const messageDiv = document.createElement("div");
    messageDiv.className = `message ${sender}`;

    // For Storm's responses, add formatted response with speaker icon
    if (sender === "storm") {
        messageDiv.innerHTML = `${formatResponse(message)} <span class="speaker-icon">ðŸ”Š</span>`;

        // Add an event listener to the speaker icon to read the message aloud when clicked
        const speakerIcon = messageDiv.querySelector(".speaker-icon");
        speakerIcon.addEventListener("click", () => speak(message));
    } else {
        // For user messages, display the message text without a speaker icon
        messageDiv.textContent = message;
    }

    chatBox.appendChild(messageDiv);
    chatBox.scrollTop = chatBox.scrollHeight;
}






// Function to handle sending and receiving messages
async function sendMessage() {
    const userText = userInput.value.trim();
    if (!userText) return;

    // Display user's message
    displayMessage(userText, "user");
    userInput.value = "";

    // Define patterns for recognizing questions about the bot's name
    const namePatterns = [
        /what.*is.*your.*name/i,
        /who.*are.*you/i,
        /your.*name/i,
        /name\??/i,
    ];

    // Check for name-related questions with flexible matching
    const isNameQuestion = namePatterns.some((pattern) => pattern.test(userText));

    if (isNameQuestion) {
        displayMessage("My name is Storm!", "storm");
        return;
    }




    if (/fuck.*you/i.test(userText)) {
        displayMessage("Fuck you too", "storm");
        return;
    }


    if (/who.*creats.*you/i,
        /who.*is.*your.*creater/i.test(userText)) {
        displayMessage("I am created by Ansari Shoaib", "storm");
        return;
    }



    // Call the backend (Google API) for other responses
    try {
        const response = await fetch("http://localhost:3000/generate", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ prompt: userText }),
        });

        const data = await response.json();
        displayMessage(data.response.text, "storm");
    } catch (error) {
        displayMessage("Oops! I couldn't process your request.", "storm");
        console.error("Error fetching response:", error);
    }
}

// Send message on button click or Enter key press
sendBtn.addEventListener("click", sendMessage);
userInput.addEventListener("keypress", (e) => {
    if (e.key === "Enter") sendMessage();
});
